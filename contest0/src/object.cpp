/*

- Госпожа Магика, так где же Винт Раздолбайло? - Спросил генерал FDI (Female Duck Inspection). - Хватит изображать! Я же
знаю, что миссис Клювдия не знает ассемблера, а какая-то женщина в компании Дональда Дака подменила библиотеку.
Очевидно, это могла быть только Магика, принявшая образ Клювдии!

- Отдайте мою Поночку. - Прорыдала Клювдия. - Это правда я. И я действительно не знаю ассемблера.

- Тогда нам нужна услуга за услугу. В Фокстроте - соседней державе лис, которые ели наших предков задолго до того, как
лисы и утки стали разумными, начали обогащать уран при помощи центрифуг. Если мы допустим создание ими ядерного оружия,
то придётся окружать нашу Родину противоракетной обороной, а наш государственный долг и так в десятки раз превышает ВВП.
Так что паровозы нужно уничтожать, пока они чайники.

К делу. Наш агент смог получить доступ к репозиторию, из которого скачиваются обновления для программного обеспечния
центрифуг. (Спасибо производителю центрифуг - разумным лягушкам, нашим друзьям по Северо-Долгопрудному Альянсу). В
объектном файле есть функция float accelerate(float x);

Если мы проанализируем, как она работает и сможем задать скорость в pi/2 раз большую, то центрифуги не заклинит, но они
выйдут из строя, забросав окрестности радиоактивным материалом. Беда в том, что они постоянно изменяют код и записывают
его объём. Так что Ваш патч должен работать, в том числе, и с изменённым кодом, но не должен менять размер сам. Сделаете
это - отпустим Вашу Поночку живой и здоровой.

*/

#include <iostream>
#include <fstream>

#define BUFFSIZE 512 * 1024

int main() {
    unsigned char buffer[BUFFSIZE];
    std::cin.read((char*)buffer, BUFFSIZE);
    std::streamsize read = std::cin.gcount();
    unsigned char pattern[] = {0xd9, 0x5d, 0xfc, 0x8b, 0x45, 0xfc, 0x89, 0x45, 0xec, 0xd9, 0x45, 0xec};
    unsigned char patch[] = {0xc7, 0x45, 0xfc, 0xdb, 0x0f, 0xc9, 0x3f, 0xd9, 0x45, 0xfc, 0xd8, 0xc9};
    for (size_t i = 0; i < BUFFSIZE; i++) {
        bool matched = true;
        for (size_t j = 0; j < sizeof(pattern) && matched; j++) {
            if (pattern[j] != buffer[i + j]) {
                matched = false;
            }
        }
        if (matched) {
            for (size_t j = 0; j < sizeof(patch); j++) {
                buffer[i + j] = patch[j];
            }
        }
    }
    std::cout.write((char*)buffer, read);

    return 0;
}